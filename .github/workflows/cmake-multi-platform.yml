# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master", qol-dependency-requirement-reduction ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 7 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Windows, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 5. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 6. <MacOS, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 7. <MacOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # TODO: test the `CMakeList.txt` optional define a path option vs. find_package(...).
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # - os: windows-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          # - os: windows-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Vulkan SDK
      uses: humbletim/install-vulkan-sdk@0ef43dbc8af56d77bcb1e8b1ebbbaa8718ead524
      with:
        version: 1.4.309.0
        cache: true

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.sh
      shell: bash

    - name: (Ubuntu) Install GLFW dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxinerama-dev libxcursor-dev libx11-dev libglu1-mesa-dev pkg-config \
          libx11-xcb-dev libxcb1-dev libxcb-glx0-dev libxrandr-dev libxi-dev
      shell: bash

    - name: Install GLFW via vcpkg
      run: ./vcpkg/vcpkg install glfw3
      shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}"
        -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}"
        -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
        -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        -S "${{ github.workspace }}"
      shell: bash

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
